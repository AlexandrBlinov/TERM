@using System.Web.UI.WebControls
@using YstProject.Models
@model  PurchaseReturnDto

@{
    ViewBag.Title = "PassToForm";
    string styleDisplay = "";
}

<h2>Возврат невостребованных товаров (не брак)</h2>


<div class="hidden" id="emptyrow-container">
@Html.Partial("_GetRowToAdd", Model)
</div>

@using (Html.BeginForm())
{
    @*Html.ValidationSummary(false, "", new { @class = "text-danger" })*@
    
    <div class="claims" id="form-rows">
        @Html.Partial("_ClaimItems",Model)
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <button id="addRow" type="button" class="btn btn-primary"><i class="fa fa-plus" aria-hidden="true"></i> Добавить товар </button>
                <button id="saveItems" type="button" class="btn btn-primary"><i class="fa fa-save" aria-hidden="true"></i> Сохранить </button>
                <button id="restoreItems" type="button" class="btn btn-primary"><i class="fa fa-restore" aria-hidden="true"></i> Восстановить </button>
                <button type="submit" class="btn btn-success"> <i class="fa fa-paper-plane" aria-hidden="true"></i> Отправить заявку</button>
            </div>
        </div>
        }


        @section scripts{
            <script>

                (function ($) {


                    $(document).on('click', '.yst-panel-close', function () {
                        var effect = $(this).data('effect');
                        $(this).closest('.panel')[effect]().remove();
                    })

                       var counterLength = Math.max($('#form-rows .panel.panel-primary').length, 1);
                  //  var counterLength =  1;
                    var itemsToSerialize = [];

                    $(document).on('click', ".claims .remove-product button", function () {
                        //debugger;
                        $(this).closest('.panel.panel-primary').remove();
                        /*   var $lastRow = $("#form-rows .panel.panel-primary:last");
                           $lastRow.find('.remove-product').show(); */

                    });


                    // обработчик нажатия на кнопку Добавить
                    $("#addRow").on('click', function () {

                        //     $('.claims .remove-product').hide();

                          var listLength = Math.max($('#form-rows .panel.panel-primary').length, counterLength++);
                       // var listLength = $('#form-rows .panel.panel-primary').length;
                        console.log(listLength);

                        var html = $('#rowToAdd')[0].outerHTML.replace(/\[0\]/g, '[' + listLength + ']').replace("ItemToReplace", listLength);

                        var $lastRow = $("#form-rows .panel.panel-primary:last");

                        $lastRow.after(html);

                        $.validator.unobtrusive.parseDynamicContent($lastRow);
                    }
                    );

                    // обработчик нажатия на кнопку Сохранить
                    $("#saveItems").on('click', function () {

                        itemsToSerialize = [];
                        $('#form-rows .panel.panel-primary').each(function () {

                            itemsToSerialize.push(
                                {
                                    SaleNumber: $(this).find('.claim-doc-number').val(),
                                    SaleDate: $(this).find('.claim-doc-date').val(),
                                    ProductId: $(this).find('.claim-product-id').val(),
                                    Count: $(this).find('.claim-count').val()
                                }
                            );
                            localStorage.setItem('returnItems', JSON.stringify(itemsToSerialize));
                        });

                    }
                    );

                    // обработчик нажатия на кнопку Восстановить
                    $("#restoreItems").on('click', function () {
                        var itemsToPass = JSON.parse(localStorage.getItem('returnItems'));

                        //   var data = JSON.stringify({'Items': itemsToPass });
                        console.log(itemsToPass);

                        $.post("ShowModel", { 'Items': itemsToPass }).done(function (data) {
                            $('#form-rows').empty().append(data);
                        });
                        
                    });


                    //
                    // При вводе товара по коду - добирает наименование
                    //
                    $(".claim-product-autocomplete").each(function (i, el) {
                        var $el = $(el);
                        $el.autocomplete({

                            //  source: "/api/productsapi/GetProductsByCode?term="+$(this).val(),
                            source: function (request, response) {

                                $.ajax({
                                    url: "/api/productsapi/GetProductsByCode",
                                    dataType: "json",
                                    data: {
                                        term: request.term,
                                    },
                                    success: function (data) {
                                        var array = $.map(data, function (m) {
                                            return {
                                                label: m.Label,
                                                value: m.Value
                                            };
                                        });

                                        response(array);
                                    },

                                });
                            },
                            minLength: 6,
                            select: function (event, ui) {
                                $el.closest('.panel-body').find('.claim-product-name').val(ui.item.label);

                            }
                        });
                    });

                    $.validator.setDefaults({
                        highlight: function (element) {

                            $(element).closest('.form-group').addClass('has-error');

                        },
                        unhighlight: function (element) {

                            $(element).closest('.form-group').removeClass('has-error');

                        },
                        errorElement: 'span',
                        errorClass: 'help-block',
                        errorPlacement: function (error, element) {
                            if (element.parent('.input-group').length) {
                                error.insertAfter(element.parent());
                            } else {
                                error.insertAfter(element);
                            }
                        }
                    });

                    $.validator.unobtrusive.parseDynamicContent = function (selector) {
                        //use the normal unobstrusive.parse method
                        $.validator.unobtrusive.parse(selector);

                        //get the relevant form
                        var form = $(selector).first().closest('form');

                        //get the collections of unobstrusive validators, and jquery validators
                        //and compare the two
                        var unobtrusiveValidation = form.data('unobtrusiveValidation');
                        var validator = form.validate();

                        $.each(unobtrusiveValidation.options.rules, function (elname, elrules) {
                            if (validator.settings.rules[elname] == undefined) {
                                var args = {};
                                $.extend(args, elrules);
                                args.messages = unobtrusiveValidation.options.messages[elname];
                                //edit:use quoted strings for the name selector
                                $("[name='" + elname + "']").rules("add", args);
                            } else {
                                $.each(elrules, function (rulename, data) {
                                    if (validator.settings.rules[elname][rulename] == undefined) {
                                        var args = {};
                                        args[rulename] = data;
                                        args.messages = unobtrusiveValidation.options.messages[elname][rulename];
                                        //edit:use quoted strings for the name selector
                                        $("[name='" + elname + "']").rules("add", args);
                                    }
                                });
                            }
                        });
                    }
                })($);
            </script>
        }
