@model  Term.Web.Models.OrdersViewModelForList
@using Term.Web.Views.Resources;
@using Term.Utils;
@using Yst.ViewModels;

@{
    ViewBag.Title = CartAndOrders.ListOfOrders;

    string invisAddStock = "";

    if (!ViewBag.IsForeign) { invisAddStock = "invisibleAddStock"; }

    bool canProcessOrders = true;//!(bool)ViewBag.IsForeign && Model.LogistikDepartment == Defaults.MainDepartmentCode;
}

<h2 class="border-form-podbor search-order-title">@ForSearchResult.ChooseOrders</h2>

@using (Html.BeginForm("List", "Orders", FormMethod.Get))
{
    <fieldset class="border-form-podbor">
        <div class="row">
            <div class="col-xs-12 col-sm-2">
                @Html.LabelFor(p => p.BeginDate, new { @class = "search-order-label" })
                <div>
                    <div class="input-group date">
                        @Html.TextBoxFor(model => model.BeginDate, new { @class = "form-control" })
                        <span class="input-group-addon date-pick-btn">
                            <span class="glyphicon glyphicon-calendar"></span>
                        </span>
                    </div>
                </div>
            </div>
            <div class="col-xs-12 col-sm-2">
                @Html.LabelFor(p => p.EndDate, new { @class = "search-order-label" })
                <div>
                    <div class="input-group date">
                        @Html.TextBoxFor(model => model.EndDate, new { @class = "form-control" })
                        <span class="input-group-addon date-pick-btn">
                            <span class="glyphicon glyphicon-calendar"></span>
                        </span>
                    </div>
                </div>
            </div>
            <div class="col-xs-12 col-sm-2">
                <label class="search-order-label">@CartAndOrders.OrderNumber</label>
                <div>
                    @Html.TextBoxFor(p => p.OrderNumber, new { @class = "form-control" })
                </div>
            </div>
            <div class="col-xs-12 col-sm-2">
                <label class="search-order-label">@CartAndOrders.Status</label>
                <div>
                    @Html.DropDownListFor(p => p.StatusId, Model.Statuses, @CartAndOrders.AllOrders, new { @class = "form-control" })
                </div>
            </div>
            <div class="col-xs-12 col-sm-2 col-md-2 col-lg-2 @invisAddStock">
                <label class="search-order-label">@CartAndOrders.Department</label>
                <div>
                    @Html.DropDownListFor(p => p.DepartmentId, new SelectList(Model.Departments, "DepartmentId", "Name"), "Все", new { @class = "form-control" })
                </div>
            </div>
            @if (ViewBag.IsPartner)
            {
                <div class="col-xs-12 col-sm-2">
                    <label class="search-order-label">@CartAndOrders.Point</label>
                    <div>
                        @Html.DropDownListFor(p => p.PointId, Model.PartnerPoints, @CartAndOrders.All, new { @class = "form-control" })
                    </div>
                </div>
            }

            <div class="col-xs-12 col-sm-3">
                <label class="search-order-label">@CartAndOrders.ByProduct</label>
                <div>
                    @Html.TextBoxFor(p => p.ProductName, new { @class = "form-control", @placeholder = @ForSearchResult.CodeOrArt })
                </div>
            </div>
            @if (!ViewBag.IsForeign)
            {
                <div class="col-xs-12 col-sm-3">

                    <label class="search-order-label">Доставка DPD</label>
                    <div class="p-t-5">
                        @Html.CheckBoxFor(m => m.IsDeliveryByTk)
                    </div>
                </div>
            }
            <div class="col-xs-12 text-center search-order-btn">
                <button class="form-podbor-btn-submit" type="submit">@CartAndOrders.Filter</button>
            </div>
        </div>
    </fieldset>

    <div class="order-table-header-block m-t-15">

        <span class="order-table-header">@CartAndOrders.ListOfOrders</span>
        @Html.PagedListPager(Model.Orders, page => Url.Action("List", new
        {
            page,
            PointId = Model.PointId,
            DepartmentId = Model.DepartmentId,
            BeginDate = Model.BeginDate.ValueForPaginator(),
            EndDate = Model.EndDate.ValueForPaginator(),
            StatusId = Model.StatusId,
            ProductName = Model.ProductName
        }),
                   new PagedListRenderOptions { LinkToFirstPageFormat = String.Format("<<"), LinkToPreviousPageFormat = String.Format("<"), LinkToNextPageFormat = String.Format(">"), LinkToLastPageFormat = String.Format(">>"), MaximumPageNumbersToDisplay = 9 })
    </div>

    <div class="row">
        <div class="col-xs-12">
            <div class="pull-left expand-collapse__container-for-orderlist">
                <a href="#" class="btn btn-styled js-expand-orders" data-title-collapse="@CartAndOrders.CollapseAll" data-title-expand="@CartAndOrders.ExpandAll">@CartAndOrders.ExpandAll</a>              
                @if (canProcessOrders)
                {
                <a href="#" class="btn btn-styled js-display-todo-items"><i class="fa fa-2x fa-truck v-a-middle"></i>   Поставить на отгрузку</a>    
                }
            </div>

            <div class="psevdo-select psevdo-select-dispos">
                <label for="ItemsPerPage">@ForSearchResult.PerPage:</label>
                @Html.DropDownListFor(p => p.ItemsPerPage, HtmlElements.ListItemsPerPage(200, 50), new { id = "ItemsPerPage", name = "ItemsPerPage", @class = "form-control" })
            </div>

        </div>
    </div>
}

@Html.Hidden("canProcessOrders", canProcessOrders ? "1":"0")


<!-- Новый вывод addon -->
    <div id="table-orders" class="data-table order-table  addon">

        <div class="thead hidden-xs">

            <div class="col-md-1 col-sm-1">@CartAndOrders.Point</div>
            <div class="col-md-2 col-sm-2">@CartAndOrders.NumberInDatabase</div>
            <div class="col-md-1 col-sm-1"> @CartAndOrders.Status</div>
            @if (ViewBag.IsPartner)
        {
            <div class="col-md-1 col-sm-1">
                @CartAndOrders.TotalSum
            </div>
    }

            <div class="col-md-1 col-sm-1">@CartAndOrders.TotalClient</div>
            <div class="col-md-1 col-sm-1"> @CartAndOrders.DateOrder</div>
            <div class="col-md-1 col-sm-1">@CartAndOrders.DateShipment</div>
            <div class="col-md-1 col-sm-1">@CartAndOrders.DateOfPayment</div>
            <div class="col-md-2 col-sm-2">@CartAndOrders.Comment</div>
            <div class="col-md-1 col-sm-1">@ForSearchResult.Action</div>

        </div>

        @foreach (var order in Model.Orders)
        {

            var totalOfPoint = order.TotalOfClient;
            if (ViewBag.IsPartner)
            {
                totalOfPoint = (order.PointId == ViewBag.CurrentPointId ? order.TotalOfClient : order.TotalOfPoint);
            }

        

            <div class="order-item-container">
                <div class="order-item" data-sum-of-client="@totalOfPoint">
                    <div class="col-md-1 col-sm-1 pos-relative">
                        @if (order.OrderStatus == Term.DAL.OrderStatuses.Confirmed && order.isReserve)
    {
                    <!-- <input type="checkbox" name="order-item-todo" data-id="@(order.GuidIn1S)" class="order-item-todo">-->

                    <input type="checkbox" class="order-item-todo" id="check-@(order.GuidIn1S)" data-id="@(order.GuidIn1S)">
                    <label class="order-item-todo-label" for="check-@(order.GuidIn1S)" style="display:none;"> </label>

}
                        @order.Point.InternalName
                        <br />
                        @if (order.IsDeliveryByTk)
    {
                    <i class="icon-dpd"></i>
}
                    </div>
                    <div class="col-md-2 col-sm-2"> <span class="open_order" data-toggle="collapse" data-target="#collapse-button-@(order.GuidIn1S)"> @order.NumberIn1S </span> </div>
                    <div class="invisibleAddStock">  @Html.DisplayFor(modelItem => order.Department.Name) </div>
                    <div class="col-md-1 col-sm-1 text">

                        @Html.OrderStatusWithColor(order.OrderStatus)
                        @if (order.IsJoined)
                    {<span class="label label-success">@CartAndOrders.CombinedOrder</span>}

                    </div>

                    @if (ViewBag.IsPartner)
                {
                    <div class="col-md-1 col-sm-1 price-filds">
                        @Html.DisplayFor(modelItem => order.Total)
                    </div>
            }


                    <div class="col-md-1 col-sm-1 price-filds">
                        @if (ViewBag.IsPartner)
                    {@(order.PointId == ViewBag.CurrentPointId ? order.TotalOfClient : order.TotalOfPoint)
            }
            else
            {
                @order.TotalOfClient
        }
                    </div>

                    <div class="col-md-1 col-sm-1">   @order.OrderDate.ToShortDateString() </div>
                    <div class="col-md-1 col-sm-1 reserve">
                        @{
                        string deliveryDate;
                        if (order.isReserve)
                        {
                            deliveryDate = @CartAndOrders.ReservedTill + " " + order.OrderDate.AddDays(7).ToShortDateString();
                        }
                        else
                        {
                            deliveryDate = order.DeliveryDate.HasValue ? ((DateTime)order.DeliveryDate).ToShortDateString() : String.Empty;
                        }
                        }

                        @(deliveryDate)

                    </div>
                    <div class="col-md-1 col-sm-1">
                        @{var dateOfPayment = order.DateOfPayment.HasValue ? ((DateTime)order.DateOfPayment).ToShortDateString() : String.Empty; }
                        @(dateOfPayment)
                    </div>
                    <div class="col-md-2 col-sm-2">  Terminal:  </div>
                    <div class="col-md-1 col-sm-1">
                        @Html.ActionLink(@CartAndOrders.Details, "Details", new { guid = order.GuidIn1S }, new { @class = "order-table-details" })
                    </div>

                </div>


                <div class="order-item-products collapse" id="collapse-button-@(order.GuidIn1S)">

                    <div class="row order-item-products__header">
                        <div class="col-xs-1">  № </div>
                        <div class="col-xs-2">    @ForSearchResult.Article  </div>
                        <div class="col-xs-1">   @ForSearchResult.StockNumber  </div>
                        <div class="col-xs-6">  @ForSearchResult.ProductName </div>

                        <div class="col-xs-1">    @ForSearchResult.Available </div>
                        <div class="col-xs-1">    @ForSearchResult.Price </div>
                    </div>


                    @{ var i = 0; }

                    @foreach (var detail in order.OrderDetails)
                {
                    i++;
                    <div class="row order-item-products__contents">
                        <div class="col-xs-1">@i</div>
                        <div class="col-xs-2">@detail.Product.Article</div>
                        <div class="col-xs-1">@detail.ProductId</div>
                        <div class="col-xs-6 name_order_details">@detail.Product.Name</div>

                        <div class="col-xs-1">@detail.Count</div>
                        <div class="col-xs-1">@detail.Price</div>
                    </div>
            }

                </div>

            </div>

        }

    </div>



<div class="m-t-15">

    @Html.PagedListPager(Model.Orders, page => Url.Action("List", new
    {
        page,
        PointId = Model.PointId,
        DepartmentId = Model.DepartmentId,
        BeginDate = Model.BeginDate.ValueForPaginator(),
        EndDate = Model.EndDate.ValueForPaginator(),
        StatusId = Model.StatusId,
        ProductName = Model.ProductName
    }),
                 new PagedListRenderOptions { LinkToFirstPageFormat = String.Format("<<"), LinkToPreviousPageFormat = String.Format("<"), LinkToNextPageFormat = String.Format(">"), LinkToLastPageFormat = String.Format(">>"), MaximumPageNumbersToDisplay = 9 })
</div>

<div class="modal fade" tabindex="-1" role="dialog" id="modal_make-to-load">
    <div class="modal-dialog modal_make-to-load" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title">Выберите дату отгрузки и способ доставки</h4>
            </div>
            <div class="modal-body modal__make-to-load">
                <div class="row">
                    <div class="col-xs-12">
                        <div class="row m-b-20">
                            <div class="col-md-3" id="deliverydate_container">

                                <div class="input-group js-datefor-shipment">
                                    @Html.TextBoxFor(model => model.DeliveryDate, new { @class = "form-control cart-date-control", data_val_requiredifnotcheched = CartAndOrders.ErrorShipmentDate, data_val_requiredifnotcheched_id = "isDelivery" })
                                    <span class="input-group-addon date-pick-btn">
                                        <span class="glyphicon glyphicon-calendar"></span>
                                    </span>

                                </div>
                                @Html.HiddenFor(m => m.LogistikDepartment)
                                <span class="b-control-hint">дата отгрузки со склада ЯШТ</span>
                            </div>

                            <div class="col-md-6" id="dayofweektodeliver_container" style="display: none;">
                                <div class="orders-unload_block">
                                    <div class="form-group">
                                        <h5 class="cart-property__caption">выгрузка</h5>
                                    </div>
                                    <div class="form-group inline-block">
                                        @Html.RadioButtonFor(m => m.DayOfWeekToDeliver, DayOfWeekToDeliver.Saturday, new { @id = "isSaturday" })
                                        <label class="cart-label m-t-5" for="isSaturday">в субботу</label>

                                    </div>
                                    <div class="form-group inline-block">
                                        @Html.RadioButtonFor(m => m.DayOfWeekToDeliver, DayOfWeekToDeliver.Monday, new { @id = "isMonday" })
                                        <label class="cart-label m-t-5" for="isMonday">в понедельник</label>
                                    </div>
                                </div>
                            </div>

                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-xs-12">
                        <hr class="cart-divider" />
                    </div>
                </div>

                <div class="row" id="errors-processorders__container" style="display:none;">
                    <div class="col-xs-12 alert alert-danger">
                        <span id="errors-processorders__text"> </span>                                             
                    </div>
                </div>
                <section class="row cart-properties js-cart js-wayofdelivery">
                    <!-- <div class="col-xs-12">
             <hr class="cart-divider" />
         </div>-->
                    <!--Способ доставки  доставка  самовывоз или dpd-->

                    <div class="col-xs-12 border-bottom">
                        <div class="row m-b-20">
                            <div class="col-xs-12">
                                <div class="row">
                                    <div class="col-xs-12 cart-property__header">
                                        <span class="cart-property__caption">  Способ доставки </span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-xs-12 no-border">
                                <div class="row">
                                    <div class="col-md-4">
                                        @Html.RadioButtonFor(m => m.WayOfDelivery, 0, new { @id = "isDeliveryByOwnTransport" })
                                        <label class="cart-label m-t-5 m-b-10" for="isDeliveryByOwnTransport">Доставка силами Яршинторг</label>
                                    </div>
                                    <div class="col-md-8">
                                        <div class="address-container">
                                            @Html.DropDownListFor(p => p.AddressId, Model.AddressesIds, "выберите адрес доставки", new { @class = "form-control" })
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-4">
                                        @Html.RadioButtonFor(m => m.WayOfDelivery, 1, new { @id = "isSelfDelivery" })
                                        <label class="cart-label m-t-5 m-b-10" for="isSelfDelivery">Самовывоз</label>
                                    </div>
                                    <div class="col-md-8">
                                        @if (Model.SelfDeliveryIds != null && Model.SelfDeliveryIds.Any())
                            {
                                <div class="selfDelivery-container" style="display: none;">
                                    @Html.DropDownListFor(p => p.SelfDeliveryId, Model.SelfDeliveryIds, "выберите адрес доставки", new { @class = "form-control" })
                                </div>
                }
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-4">
                                        @Html.RadioButtonFor(m => m.WayOfDelivery, 3, new { @id = "isTransportCompany" })
                                        <label class="cart-label m-t-5 m-b-10" for="isTransportCompany">транспортной компанией</label>
                                    </div>
                                    <div class="col-md-8">
                                        <div class="tk-container">
                                            @Html.DropDownListFor(p => p.TkId, Model.TkIds, "выберите транспортную компанию", new { @class = "form-control" })
                                        </div>
                                    </div>
                                </div>
                            </div>


                        </div>
                    </div>
                </section>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal" >Закрыть</button>
                <button type="button" class="btn btn-primary" onclick="processOrders();">Оформить</button>
            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div><!-- /.modal -->

<div class="choosetodeliver-orders-notifier" id="choosetodeliver-orders-notifier" style="display:none;">

    
    <div class="choosetodeliver-orders-notifier__divider">
        <label>Выбрано</label><span class="m-l-10" id="number-of-orders-selected"> </span> <span class="">  заказов </span>
       
    </div>
    <div class="choosetodeliver-orders-notifier__divider">

        <label>на сумму</label><span class="" id="sum-of-orders-selected"> </span> <span class="rouble">P</span>
    </div>
    <div class="btn-cont-in-footer">
        <button class="btn btn-styled" onclick="processOpenMakeToLoad()"> Оформить на отгрузку </button>
        <button class="btn btn-styled" onclick="closeOrdersNotifier();"> Отменить </button>
    </div>


</div>

@section Scripts {
    <script>
        //show errors on validatuion in block
        function showError(errorText) {  // 'this' is the form element
            var $container = $('#errors-processorders__container');

            $('#errors-processorders__text').text(errorText);
            if (errorText)  $container.show();                
            else  $container.hide();
            
        }

        function prepareDataToProcess() {
            var params = {
                'WayOfDelivery': $('[name=WayOfDelivery]:checked').val(),
                'AddressId': $('#AddressId').val(),
                'TkId': $('#TkId').val(),
                'DeliveryDate': $('#DeliveryDate').val(),
                'DayOfWeekToDeliver': $('[name=DayOfWeekToDeliver]:checked').val()
            };

            var orderGuids = [];
            $('.order-item-todo:checked').each(function () {
                orderGuids.push($(this).data('id'));
            });
            params['OrderGuids'] = orderGuids;
            return params;
        }

        function processOrders() {

            var params = prepareDataToProcess();
            showError('');

            $.post('/orders/ProcessOrders', params)
                .done(function (data) {

                    if (typeof data === "object" && data.hasOwnProperty('Success') && !data.Success) {
                
                        showError(  data.Text);
                    } else {
                        try {
                            console.log(data);
                            $('.order-item-todo:checked').closest('.order-item').find('.reserve').text($('#DeliveryDate').val());
                            $('#modal_make-to-load').modal('hide');
                        } catch(e)
                        {

                        }
                        

                    }
                })
                .fail(function (xhr, status) {
                    console.error(xhr.responseText);
                });
        }

        function canProcessOrders() {
            return $('#canProcessOrders').val() === "1";
        }
        // закрыть заказы
        function closeOrdersNotifier()
        {
            $('#choosetodeliver-orders-notifier').hide();
            $('.order-item-todo-label').hide();
            $('.order-item-todo:checked').prop("checked", false);

        }

        // модальное окно для указания параметров групповой обработки заказов
        function processOpenMakeToLoad() {
            $('#modal_make-to-load').modal();
            updateDatepicker();
            $('.choosetodeliver-orders-notifier').hide();
        }

        function updateDatepicker() {
            
            var workingDepartmentCodes = ["00005", "00112", "00106"];
            var enabledDates = [];
            var picker = $('.js-datefor-shipment').data("DateTimePicker");
            var $ld = $("#LogistikDepartment").val();
            if (!$ld || workingDepartmentCodes.indexOf($ld) < 0) return;

            var addressId = $('#AddressId').val();
            if (addressId && canProcessOrders()) {
                $.get('/orders/GetDatesOfShipment', { "addressId": addressId })
                    .done(function (data) {

                        var result = data.result;
                        for (var i = 0; i < result.length; i++) {

                            var newDate = dateUtils.dateFromString(result[i]);
                            enabledDates.push(newDate);
                        }


                        picker.options({ 'enabledDates': enabledDates });
                        if (Array.isArray(enabledDates) && enabledDates.length > 0) {
                            picker.date(enabledDates[0]);

                               console.log(enabledDates[0]);
                        }
                        hideOrShowDayofWeekToDeliver();
                    })
                    .fail(function (xhr, status) {
                        console.error(xhr.responseText);
                    });

            }


        }

        function hideOrShowDayofWeekToDeliver() {
            var Friday = 5;
            var WordToSearch = 'моск';
            var container = $('#dayofweektodeliver_container');
            if ( $('#isDeliveryByOwnTransport').is(':checked')) {

                var addr = $('#AddressId').find('option:selected');
                if (addr && addr.text() && addr.text().toLowerCase().indexOf(WordToSearch) >= 0) {
                    var d1 = $("#DeliveryDate").val();
                    var d2 = dateUtils.dateFromString(d1);
                    if (d2.getDay() === Friday) {
                        container.show(); return;
                    }
                }
            }

            container.hide();
            //return false;
        }

        // Подключаем iCheck Для radiobutton
        $(function () {

            var enabledDates = [],
                today = new Date();


            $('#modal_make-to-load').on('hidden.bs.modal', function () {
                showError('');
                closeOrdersNotifier();
            })

            $('.js-datefor-shipment').datetimepicker({
                format: 'DD.MM.YYYY',
                locale: YstLocale.GetLocale("Culture"),
                allowInputToggle: true,
                showTodayButton: true,
                defaultDate: today,
                minDate: today,
                showClear: false,
                enabledDates: enabledDates

            }).on('dp.change', function (event) {

                hideOrShowDayofWeekToDeliver();
             
            });


            
          //  (function init() {
               
                $('.tk-container').hide();

        //    })(); 

            ///
            // выбор способа доставки
            ///

            $('[name=WayOfDelivery]').on('ifChecked', function (event) {
                var $address_container = $('.address-container'),
                    $tk_container = $('.tk-container'),
                    $sdk = $('.selfDelivery-container'),
                    $dcc = $('.dpd-calc-container');



                switch (event.target.id) {
                    case 'isDpdDelivery': {

                        $address_container.hide('slow');
                        $tk_container.hide('slow');
                        $sdk.hide('slow');
                        $dcc.show();
                        break;
                    }
                    case 'isSelfDelivery': {
                        $address_container.hide('slow');
                        $tk_container.hide('slow');
                        $sdk.show('slow');
                        //   dpdModule.refuseFromDelivery();
                        break;
                    }
                    case 'isTransportCompany':
                        {

                            $address_container.hide();
                            $tk_container.show('slow');
                            $sdk.hide();
                            //         dpdModule.refuseFromDelivery();
                            break;

                        }
                    default: // isDeliveryByOwnTransport
                        {
                            $address_container.show('slow');
                            $tk_container.hide('slow');
                            $sdk.hide('slow');
                            updateDatepicker();
                            //         dpdModule.refuseFromDelivery();
                        }
                }
            });

            // { Подключаем iCheck --
            $('[name=IsDeliveryByTk]').iCheck({
                checkboxClass: 'icheckbox_square-blue',
            });

            $('[name=WayOfDelivery],[name=DayOfWeekToDeliver]').iCheck({
                radioClass: 'iradio_square-blue'
            });
            //}

            $('#AddressId').change(function () { updateDatepicker() });


            $('.order-item-todo').on('change', function () {
                $('#choosetodeliver-orders-notifier').show();
                var $checkedItems=$('.order-item-todo:checked');

                $('#number-of-orders-selected').text($checkedItems.length);

                var totalSum = 0;
                $checkedItems.each(function () {
                    var total = $(this).closest('.order-item').data('sum-of-client');
                    totalSum += Number.parseFloat(total);
                    
                });
                $('#sum-of-orders-selected').text(totalSum);


             //   var $el = $('.js-display-todo-items').first();
             //   $el.data("stage-id", "3");
             //   $el.text($el.data("title-stage2"));

            });

            $('.js-display-todo-items').on('click', function () {
                $('.order-item-todo-label').show();
                console.log($(this).data("stage-id"));
                $(this).data("stage-id", "2");

                $('.order-item-todo:checked').length

                return false;
            });







            $('.js-expand-orders').on('click', function () {

                if (!$(this).hasClass('expanded')) {
                    $('.order-item-products.collapse').addClass('in');
                    $(this).addClass('expanded');
                    $(this).text($(this).data('title-collapse'));
                } else {
                    $('.order-item-products.collapse').removeClass('in');
                    $(this).removeClass('expanded');
                    $(this).text($(this).data('title-expand'));
                }
                return false;
            });



        }())

    </script>
}
